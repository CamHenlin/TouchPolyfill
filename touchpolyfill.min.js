(function () { function u() { function t(e, t, n, r, i, s, o, u) { this.identifier = e; this.target = t; this.screenX = n; this.screenY = r; this.clientX = i; this.clientY = s; this.pageX = o; this.pageY = u } function n(t) { var n; for (n = 0; n < e.length; n += 1) { if (e[n].identifier === t) { return e[n] } } } function r(t) { var n; for (n = 0; n < e.length; n += 1) { if (e[n].identifier === t.identifier) { e[n] = t; return } } e.push(t) } function i(t) { var n; for (n = 0; n < e.length; n += 1) { if (e[n].identifier === t) { e.splice(n, 1) } } } function s() { while (e.length > 0) { e.pop() } } function o(t, n) { var r; for (r = 0; r < e.length; r += 1) { if (e[r].screenX === t && e[r].screenY === n) { return true } } return false } var e = []; this.touchList = e; this.Touch = t; this.getTouch = n; this.addUpdateTouch = r; this.removeTouch = i; this.clearTouches = s; this.containsTouchAt = o } function a(e, t) { return e.screenX === t.screenX && e.screenY === t.screenY } function f(e, t) { var n; t = t || { bubbles: false, cancelable: false, detail: undefined }; n = document.createEvent("CustomEvent"); n.initCustomEvent(e, t.bubbles, t.cancelable, t.detail); return n } function l(e) { while (e && !e.handJobjs_forcePreventDefault) { e = e.parentNode } return !!e || window.handJobjs_forcePreventDefault } function c(t, n, r, i, u) { function c(t) { var n, r, i, u, l; C("touch!"); if (t.type === "pointerdown") { n = "touchstart" } else if (t.type === "pointermove") { n = "touchmove" } else { throw new Error("touchHandler received invalid event type: " + n + ". Valid event types are pointerdown and pointermove") } C(n); i = new s.Touch(t.pointerId, t.target, t.screenX, t.screenY, t.clientX, t.clientY, t.pageX, t.pageY); if (t.hwTimestamp > e) { (function () { var e, t, n, r, i; t = o.touchList; for (e = 0; e < t.length; e += 1) { n = t[e]; i = n.identifier; r = s.getTouch(i); if (!r || a(r, n)) { o.removeTouch(i) } } })() } C("generating touch cloned"); s.addUpdateTouch(i); o.addUpdateTouch(i); t.type = n; u = new f(n, { bubbles: true, cancelable: true }); u.touches = s.touchList; u.changedTouches = o.touchList; u.type = n; return u } function h(t) { var n, r, i; C("touchchanged!"); t.changedTouches = []; t.changedTouches.length = 1; t.changedTouches[0] = t; t.changedTouches[0].identifier = t.pointerId; if (t.type === "pointerup") { n = "touchend" } else if (t.type === "pointercancel") { n = "touchcancel" } else if (t.type === "pointerleave") { n = "touchleave" } r = new s.Touch(t.pointerId, t.target, t.screenX, t.screenY, t.screenX, t.clientY, t.pageX, t.pageY); if (t.hwTimestamp > e) { o.clearTouches() } s.removeTouch(r.identifier); o.addUpdateTouch(r); t.type = n; i = new f(n, { bubbles: true, cancelable: true }); i.touches = s.touchList; i.changedTouches = o.touchList; i.type = n; return i } var l; if (t.type === "pointerdown" || t.type === "pointermove") { l = c(t) } else { l = h(t) } l.preventDefault = function () { if (t.preventDefault !== undefined) { t.preventDefault() } }; C("dispatching!"); t.target.dispatchEvent(l); e = event.hwTimestamp } function h(e, t, n, r, i, s) { c(t, e, i, n, s) } function p(e, t, n, r) { C("registerOrUnregisterEvent"); if (e.__handJobjsRegisteredEvents === undefined) { e.__handJobjsRegisteredEvents = [] } if (r) { if (e.__handJobjsRegisteredEvents[t] !== undefined) { e.__handJobjsRegisteredEvents[t] += 1; return } e.__handJobjsRegisteredEvents[t] = 1; C("adding event " + t); e.addEventListener(t, n, false) } else { if (e.__handJobjsRegisteredEvents.indexOf(t) !== -1) { e.__handJobjsRegisteredEvents[t] -= 1; if (e.__handJobjsRegisteredEvents[t] !== 0) { return } } C("removing event"); e.removeEventListener(t, n); e.__handJobjsRegisteredEvents[t] = 0 } } function d(e, t, n) { function s(e) { return e } var r, i; C("setTouchAware " + n + " " + t); if (!e.__handJobjsGlobalRegisteredEvents) { e.__handJobjsGlobalRegisteredEvents = [] } if (n) { if (e.__handJobjsGlobalRegisteredEvents[t] !== undefined) { e.__handJobjsGlobalRegisteredEvents[t] += 1; return } e.__handJobjsGlobalRegisteredEvents[t] = 1; C(e.__handJobjsGlobalRegisteredEvents[t]) } else { if (e.__handJobjsGlobalRegisteredEvents[t] !== undefined) { e.__handJobjsGlobalRegisteredEvents[t] -= 1; if (e.__handJobjsGlobalRegisteredEvents[t] < 0) { e.__handJobjsGlobalRegisteredEvents[t] = 0 } } } r = c; i = s(t); if (e["on" + i.toLowerCase()] !== undefined) { p(e, i, function (e) { r(e, t) }, n) } } function v(e) { function n(e, n, i) { C("customAddEventListener"); C(e); if (r.indexOf(e) !== -1) { C("setting touch aware..."); d(this, e, true) } t.call(this, e, n, i) } var t = e.prototype ? e.prototype.addEventListener : e.addEventListener; C("intercepting add event listener!"); C(e); if (e.prototype) { e.prototype.addEventListener = n } else { e.addEventListener = n } } function m(e, t) { C("handle other event"); if (e.preventManipulation) { e.preventManipulation() } c(touchPoint, t) } function g(e, t) { if (e.ontouchdown !== undefined) { return } if (e.ontouchstart !== undefined) { switch (t.toLowerCase()) { case "touchstart": e.removeEventListener("pointerdown", function (e) { m(e, t) }); break; case "touchmove": e.removeEventListener("pointermove", function (e) { m(e, t) }); break; case "touchend": e.removeEventListener("pointerup", function (e) { m(e, t) }); break; case "touchcancel": e.removeEventListener("pointercancel", function (e) { m(e, t) }); break } } } function y(e) { function n(e, n, i) { if (r.indexOf(e) !== -1) { g(this, e) } t.call(this, e, n, i) } var t = e.prototype ? e.prototype.removeEventListener : e.removeEventListener; if (e.prototype) { e.prototype.removeEventListener = n } else { e.removeEventListener = n } } function b(e, t) { C("checkEventRegistration"); return e.__handJobjsGlobalRegisteredEvents && e.__handJobjsGlobalRegisteredEvents[t] } function w(e, t) { C("findEventRegisteredNode"); while (e && !b(e, t)) { e = e.parentNode } if (e) { return e } if (b(window, t)) { return window } } function E(e, t, n, r, i, s) { C("generateTouchEventProxyIfRegistered"); if (w(n, e)) { h(e, t, n, r, i, s) } } function S(e) { var t = []; if (e) { t.unshift(e); while (e.parentNode) { t.unshift(e.parentNode); e = e.parentNode } } return t } function x(e, t) { var n = S(e), r = S(t), i = null; while (n.length > 0 && n[0] === r.shift()) { i = n.shift() } return i } function T(e, t, n) { C("dispatchPointerEnter"); var r = x(e, t), i = e, s = []; while (i && i !== r) { if (b(i, "touchenter")) { s.push(i) } i = i.parentNode } while (s.length > 0) { n(s.pop()) } } function N(e, t, n) { C("dispatchPointerLeave"); var r = x(e, t), i = e; while (i && i !== r) { if (b(i, "touchleave")) { n(i) } i = i.parentNode } } function C(e) { if (t) { console.log(e.toString()) } } var e = 0, t = false, n = navigator.userAgent, r = ["touchstart", "touchmove", "touchend", "touchcancel", "touchleave"], i = {}, s, o; f.prototype = window.Event.prototype; if (typeof window.ontouchstart === "object") { return } if (n.match(/iPad/i) || n.match(/iPhone/i) || n.match(/iPod/i) || n.match(/Android/i) || n.match(/MSIE/i) && !n.match(/Touch/i)) { return } (function () { var e = "html { -ms-touch-action: none; }", t = document.head || document.getElementsByTagName("head")[0], n = document.createElement("style"); n.type = "text/css"; if (n.styleSheet) { n.styleSheet.cssText = e } else { n.appendChild(document.createTextNode(e)) } t.appendChild(n) })(); s = new u; o = new u; window.CustomEvent = f; v(window); v(window.HTMLElement || window.Element); v(document); v(HTMLBodyElement); v(HTMLDivElement); v(HTMLImageElement); v(HTMLUListElement); v(HTMLAnchorElement); v(HTMLLIElement); v(HTMLTableElement); if (window.HTMLSpanElement) { v(HTMLSpanElement) } if (window.HTMLCanvasElement) { v(HTMLCanvasElement) } if (window.SVGElement) { v(SVGElement) } y(window); y(window.HTMLElement || window.Element); y(document); y(HTMLBodyElement); y(HTMLDivElement); y(HTMLImageElement); y(HTMLUListElement); y(HTMLAnchorElement); y(HTMLLIElement); y(HTMLTableElement); if (window.HTMLSpanElement) { y(HTMLSpanElement) } if (window.HTMLCanvasElement) { y(HTMLCanvasElement) } if (window.SVGElement) { y(SVGElement) } (function () { window.addEventListener("pointerdown", function (e) { C("pointerdownfired"); var t = e; if (e.pointerType === "mouse") { return } i[t.identifier] = t.target; E("touchenter", t, t.target, e, true); T(t.target, null, function (n) { h("touchenter", t, n, e, false) }); E("touchstart", t, t.target, e, true) }); window.addEventListener("pointerup", function (e) { var t = e, n = i[t.identifier]; C("pointer up fired"); if (e.pointerType === "mouse") { return } E("touchend", t, n, e, true); E("touchleave", t, n, e, true); N(n, null, function (n) { h("touchleave", t, n, e, false) }) }); window.addEventListener("pointermove", function (e) { var t = e, n = i[t.identifier]; C("pointer move fired"); if (e.pointerType === "mouse") { return } C("x: " + e.screenX + ", y: " + e.screenY); if (s.containsTouchAt(e.screenX, e.screenY)) { return } if (n && l(n) === true) { e.preventDefault() } E("touchmove", t, n, e, true) }) })() })()